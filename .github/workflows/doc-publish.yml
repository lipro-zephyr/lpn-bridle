# Copyright (c) 2021 TiaC Systems
# Copyright (c) 2021 Li-Pro.Net
# SPDX-License-Identifier: Apache-2.0

name: Documentation Publish

on:
  workflow_run:
    # remove not (yet) supported:
    # workflows: ["Documentation Build", "Documentation Remove"]
    workflows: ["Documentation Build"]
    types: [completed]

jobs:
  doc-publish:
    name: Publish archived documentation from artifacts
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "doc"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/doc.zip', Buffer.from(download.data));

      - name: Prepare documentation
        id: prepare_doc
        run: |
          # synopsys: publish2 <catalog> <version> <file>
          #   <catalog> := {development|approved}
          #   <version> := {latest|<branch>}
          #      <file> := doc_build_<GITHUB_RUN_ID_from_doc-build>.tgz
          unzip doc.zip
          monitor=$(ls -1 monitor_*.txt | head -1)
          catalog=$(awk -e '/publish2/{print $2}' "${monitor}")
          version=$(awk -e '/publish2/{print $3}' "${monitor}")
          file=$(awk -e '/publish2/{print $4}' "${monitor}")
          mkdir "${version}" && cd "${version}"
          tar -zxf "../${file}"
          # reuseable as:
          #   ${{ steps.prepare_doc.outputs.catalog }}
          #   ${{ steps.prepare_doc.outputs.version }}
          echo "::set-output name=catalog::${catalog}"
          echo "::set-output name=version::${version}"

      - name: Deploy documentation
        uses: sand4rt/ftp-deployer@v1.3
        with:
          sftp: true
          port: 22
          host: ${{ secrets.TSN_FTP_HOST }}
          username: ${{ secrets.TSN_FTP_USERNAME }}
          password: ${{ secrets.TSN_FTP_PASSWORD }}
          remote_folder: ${{ secrets.TSN_FTP_BRIDLE_DOC_ROOT }}/${{ steps.prepare_doc.outputs.version }}
          local_folder: ${{ steps.prepare_doc.outputs.version }}
          cleanup: true
        if: steps.prepare_doc.outputs.catalog == 'approved'
